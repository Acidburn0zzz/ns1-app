{"version":3,"sources":["../../src/config/config.js"],"names":[],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nclass Ns1ConfigCtrl {\n  constructor($scope, $injector, backendSrv) {\n    this.backendSrv = backendSrv;\n    this.appModel.secureJsonData = {};\n    if (this.appModel.jsonData === null) {\n      this.appModel.jsonData = {\n        gnetTokenSet: false,\n        ns1TokenSet: false,\n      };\n    }\n    this.taskStatus = \"Task status unknown\";\n    this.task = {};\n    this.error = false;\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n    var self = this;\n    if (this.appModel.enabled) {\n      this.getCustomerId().then((resp) => {\n        var taskName = self.taskName(resp.customerid);\n        self.getTask(taskName).then((exists) => {\n          if (!exists) {\n            self.appModel.jsonData.ns1TokenSet = false;\n            self.error = \"Please re-enter NS1 apiKey and hit update to create the task.\";\n          }\n        });\n      }, () => {\n        // if we cant get the customerId, then we need to re-enter the ns1Token.\n        self.appModel.jsonData.ns1TokenSet = false;\n        self.error = \"invalid NS1 apiKey. Please update the key.\";\n      });\n    }\n  }\n\n  preUpdate() {\n    if (this.appModel.secureJsonData.ns1_token) {\n      this.appModel.jsonData.ns1TokenSet = true;\n    }\n    if (this.appModel.secureJsonData.gnet_token) {\n      this.appModel.jsonData.gnetTokenSet = true;\n    }\n    return this.initDatasource();\n  }\n\n  postUpdate() {\n  \tvar self = this;\n    if (!this.appModel.enabled) {\n      return Promise.resolve();\n    }\n    if (!this.appModel.jsonData.ns1TokenSet) {\n      return Promise.resolve();\n    }\n    // make sure our Api key works.\n    return this.getCustomerId()\n    .then((resp) => {\n      var p = self.ensureTask(resp.customerid, self.appModel.secureJsonData.ns1_token);\n      p.then(() => {\n        return this.appEditCtrl.importDashboards(); \n      }, () => {\n        console.log(\"failed to add task.\");\n        self.appModel.enabled = false;\n        self.error = \"Unable to add collector task. Please try again.\";\n        self.appModel.jsonData.ns1TokenSet = false;\n      });\n      return p;\n    }, () => {\n      console.log(\"failed to query NS1 API.\");\n    \tself.error = \"Unable to query NS1 API. please re-enter API Key\";\n      self.appModel.jsonData.ns1TokenSet = false;\n    });\n  }\n\n  getCustomerId() {\n    return this.backendSrv.get(\"api/plugin-proxy/raintank-ns1-app/ns1/account/settings\");\n  }\n\n  taskName(customerid) {\n    return \"NS1-\" + customerid;\n  }\n\n  ensureTask(customerid, ns1Token) {\n    if (!ns1Token) {\n      return Promise.reject(\"ns1 token not set.\");\n    }\n    var self = this;\n    var taskName = this.taskName(customerid);\n    return this.getTask(taskName).then((exists) => {\n      if (exists) {\n        self.taskStatus = \"Task exists.\";\n        return;\n      }\n      var task = {\n        \"name\": taskName,\n        \"metrics\": {\"/raintank/apps/ns1/*\":0},\n        \"config\": {\n          \"/raintank/apps/ns1\": {\n            \"ns1_key\": ns1Token\n          }\n        },\n        \"interval\": 60,\n        \"route\": { \"type\": \"any\"},\n        \"enabled\": true\n      };\n\n      var p = self.backendSrv.post(\"/api/plugin-proxy/raintank-ns1-app/tasks\", task)\n      p.then((resp) => {\n        this.task = resp.body;\n        self.taskStatus = \"Task created.\";\n      });\n      return p;\n    });\n  }\n\n  getTask(taskName) {\n    var self = this;\n    return this.backendSrv.get(\"/api/plugin-proxy/raintank-ns1-app/tasks\", {metric: \"/raintank/apps/ns1/*\", name: taskName})\n    .then((resp) => {\n      //console.log(resp);\n      if (resp.body.length > 0 ){\n        self.task = resp.body[0];\n        self.taskStatus = \"Task exists.\";\n        return true;\n      }\n      return false;\n    });\n  }\n\n  stopTask() {\n    this.appModel.jsonData.ns1TokenSet=false;\n    if (!this.task) {\n      console.log(\"unknown task name.\");\n      return;\n    }\n    return this.backendSrv.delete(\"/api/plugin-proxy/raintank-ns1-app/tasks/\"+this.task.id).then((resp) => {\n      this.task = {};\n      this.taskStatus = \"Task not found.\";\n    });\n  }\n\n  resetNs1Token() {\n    this.appModel.jsonData.ns1TokenSet=false;\n    this.task = {};\n    this.taskStatus = \"Task status unknown.\"\n  }\n  initDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return self.backendSrv.get('/api/datasources').then(function(results) {\n      var foundGraphite = false;\n      var foundElastic = false;\n      _.forEach(results, function(ds) {\n        if (foundGraphite && foundElastic) { return; }\n        if (ds.name === \"raintank\") {\n          foundGraphite = true;\n        }\n        if (ds.name === \"raintankEvents\") {\n          foundElastic = true;\n        }\n      });\n      var promises = [];\n      if (!foundGraphite) {\n        // create datasource.\n        var graphite = {\n          name: 'raintank',\n          type: 'graphite',\n          url: 'api/plugin-proxy/raintank-ns1-app/graphite',\n          access: 'direct',\n          jsonData: {}\n        };\n        promises.push(self.backendSrv.post('/api/datasources', graphite));\n      }\n      if (!foundElastic) {\n        // create datasource.\n        var elastic = {\n          name: 'raintankEvents',\n          type: 'elasticsearch',\n          url: 'api/plugin-proxy/raintank-ns1-app/elasticsearch',\n          access: 'direct',\n          database: '[events-]YYYY-MM-DD',\n          jsonData: {\n            esVersion: 1,\n            interval: \"Daily\",\n            timeField: \"timestamp\"\n          }\n        };\n        promises.push(self.backendSrv.post('/api/datasources', elastic));\n      }\n      return Promise.all(promises);\n    });\n  }\n}\n\nNs1ConfigCtrl.template = configTemplate;\n\nexport {\n  Ns1ConfigCtrl as ConfigCtrl\n};\n\n"]}